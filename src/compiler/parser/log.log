Terminals unused in grammar

   C_FUNCTION
   USE
   COLON
   SEMICOLON
   LEFT_BRACKET
   RIGHT_BRACKET
   IN
   WHILE


Grammar

    0 $accept: program "end of file"

    1 program: block

    2 block: lines

    3 lines: line
    4      | lines line

    5 line: line_content EOL
    6     | line_content "end of file"
    7     | definition
    8     | import

    9 import: IMPORT STRING_LITERAL EOL

   10 line_content: expression

   11 definition: function_definition
   12           | class_definition
   13           | c_type_definition
   14           | globals_definition
   15           | c_function_declaration

   16 function_definition: function_start arguments EOL block return_value EOL
   17                    | function_start arguments EOL return_value EOL

   18 function_start: FUNCTION_DEFINITION

   19 class_definition: class_start arguments EOL members_definition methods
   20                 | class_start arguments EOL members_definition
   21                 | class_start arguments EOL methods

   22 class_start: CLASS_DEFINITION

   23 c_type_definition: c_type_start EOL C_members_definition

   24 c_type_start: C_TYPE_DEFINITION

   25 methods: method_definition EOL
   26        | methods method_definition EOL

   27 method_start: METHOD_DEFINITION

   28 method_definition: method_start arguments EOL block return_value
   29                  | method_start arguments EOL return_value

   30 members_definition: MEMBER_IDENTIFIER EQUAL expression EOL
   31                   | members_definition MEMBER_IDENTIFIER EQUAL expression EOL

   32 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier EOL
   33                     | C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

   34 C_type_identifier: IDENTIFIER
   35                  | C_type_identifier IDENTIFIER

   36 C_arguments: C_type_identifier
   37            | C_arguments COMMA C_type_identifier

   38 C_returns: C_type_identifier

   39 return_value: RETURN expression
   40             | RETURN

   41 arguments: LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   42          | LEFT_PARENTHESIS RIGHT_PARENTHESIS

   43 definition_arguments: IDENTIFIER
   44                     | definition_arguments COMMA IDENTIFIER

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

   46 global_start: GLOBAL

   47 globals_variables: assign_variable
   48                  | globals_variables EOL assign_variable

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

   51 expressions: expression
   52            | expressions COMMA expression

   53 if_start: IF

   54 else_start: ELSE

   55 for_start: FOR expression COMMA expression COMMA expression

   56 expression: if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | assign_variable
   60           | expression ARROW expression
   61           | expression PLUS expression
   62           | expression MINUS expression
   63           | expression ASTERISK expression
   64           | expression SLASH expression
   65           | expression OP_AND expression
   66           | expression OP_OR expression
   67           | expression OP_MORE_EQUAL expression
   68           | expression OP_LESS_EQUAL expression
   69           | expression OP_MORE expression
   70           | expression OP_LESS expression
   71           | expression OP_NOT_EQUAL expression
   72           | expression OP_EQUAL expression
   73           | monomial
   74           | list
   75           | access

   76 list: LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | LEFT_CURLY_BRACE RIGHT_CURLY_BRACE

   78 access: expression DOT_IDENTIFIER

   79 assign_variable: IDENTIFIER EQUAL expression
   80                | access EQUAL expression

   81 monomial: call
   82         | STRING_LITERAL
   83         | FLOAT_LITERAL
   84         | INT_LITERAL
   85         | variable

   86 call: IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | access LEFT_PARENTHESIS RIGHT_PARENTHESIS

   90 variable: IDENTIFIER


Terminals, with rules where they appear

"end of file" (0) 0 6
error (256)
FUNCTION_DEFINITION (258) 18
METHOD_DEFINITION (259) 27
CLASS_DEFINITION (260) 22
C_TYPE_DEFINITION (261) 24
C_FUNCTION_DECLARATION (262) 49 50
RETURN (263) 39 40
C_FUNCTION (264)
MEMBER_IDENTIFIER (265) 30 31 32 33
IDENTIFIER (266) 34 35 43 44 79 86 87 90
EQUAL (267) 30 31 32 33 79 80
ARROW (268) 60
OP_AND (269) 65
OP_OR (270) 66
OP_EQUAL (271) 72
OP_NOT_EQUAL (272) 71
OP_MORE_EQUAL (273) 67
OP_LESS_EQUAL (274) 68
OP_MORE (275) 69
OP_LESS (276) 70
PLUS (277) 61
MINUS (278) 62
ASTERISK (279) 63
SLASH (280) 64
DOT_IDENTIFIER (281) 78
USE (282)
COLON (283)
SEMICOLON (284)
COMMA (285) 37 44 52 55
LEFT_PARENTHESIS (286) 41 42 45 56 57 58 86 87 88 89
RIGHT_PARENTHESIS (287) 41 42 45 56 57 58 86 87 88 89
LEFT_CURLY_BRACE (288) 76 77
RIGHT_CURLY_BRACE (289) 76 77
LEFT_BRACKET (290)
RIGHT_BRACKET (291)
IF (292) 53
ELSE (293) 54
FOR (294) 55
IN (295)
WHILE (296)
GLOBAL (297) 46
IMPORT (298) 9
C_FUNCTION_ARGUMENT (299) 49 50
C_FUNCTION_RETURN (300) 49 50
EOL (301) 5 9 16 17 19 20 21 23 25 26 28 29 30 31 32 33 45 48 49 50
    56 57 58
STRING_LITERAL (302) 9 82
INT_LITERAL (303) 84
FLOAT_LITERAL (304) 83


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1, on right: 0
block (52)
    on left: 2, on right: 1 16 28 56 57 58
lines (53)
    on left: 3 4, on right: 2 4
line (54)
    on left: 5 6 7 8, on right: 3 4
import (55)
    on left: 9, on right: 8
line_content (56)
    on left: 10, on right: 5 6
definition (57)
    on left: 11 12 13 14 15, on right: 7
function_definition (58)
    on left: 16 17, on right: 11
function_start (59)
    on left: 18, on right: 16 17
class_definition (60)
    on left: 19 20 21, on right: 12
class_start (61)
    on left: 22, on right: 19 20 21
c_type_definition (62)
    on left: 23, on right: 13
c_type_start (63)
    on left: 24, on right: 23
methods (64)
    on left: 25 26, on right: 19 21 26
method_start (65)
    on left: 27, on right: 28 29
method_definition (66)
    on left: 28 29, on right: 25 26
members_definition (67)
    on left: 30 31, on right: 19 20 31
C_members_definition (68)
    on left: 32 33, on right: 23 33
C_type_identifier (69)
    on left: 34 35, on right: 32 33 35 36 37 38
C_arguments (70)
    on left: 36 37, on right: 37 49
C_returns (71)
    on left: 38, on right: 49 50
return_value (72)
    on left: 39 40, on right: 16 17 28 29
arguments (73)
    on left: 41 42, on right: 16 17 19 20 21 28 29
definition_arguments (74)
    on left: 43 44, on right: 41 44
globals_definition (75)
    on left: 45, on right: 14
global_start (76)
    on left: 46, on right: 45
globals_variables (77)
    on left: 47 48, on right: 45 48
c_function_declaration (78)
    on left: 49 50, on right: 15
expressions (79)
    on left: 51 52, on right: 52 76 86 88
if_start (80)
    on left: 53, on right: 56
else_start (81)
    on left: 54, on right: 57
for_start (82)
    on left: 55, on right: 58
expression (83)
    on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
    74 75, on right: 10 30 31 39 51 52 55 56 60 61 62 63 64 65 66 67
    68 69 70 71 72 78 79 80
list (84)
    on left: 76 77, on right: 74
access (85)
    on left: 78, on right: 75 80 88 89
assign_variable (86)
    on left: 79 80, on right: 47 48 59
monomial (87)
    on left: 81 82 83 84 85, on right: 73
call (88)
    on left: 86 87 88 89, on right: 81
variable (89)
    on left: 90, on right: 85


State 0

    0 $accept: . program "end of file"
    1 program: . block
    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    program                 go to state 15
    block                   go to state 16
    lines                   go to state 17
    line                    go to state 18
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 1

   18 function_start: FUNCTION_DEFINITION .

    $default  reduce using rule 18 (function_start)


State 2

   22 class_start: CLASS_DEFINITION .

    $default  reduce using rule 22 (class_start)


State 3

   24 c_type_start: C_TYPE_DEFINITION .

    $default  reduce using rule 24 (c_type_start)


State 4

   49 c_function_declaration: C_FUNCTION_DECLARATION . EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION . EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

    EOL  shift, and go to state 41


State 5

   79 assign_variable: IDENTIFIER . EQUAL expression
   86 call: IDENTIFIER . LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | IDENTIFIER . LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: IDENTIFIER .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    EQUAL             shift, and go to state 42
    LEFT_PARENTHESIS  shift, and go to state 43

    $default  reduce using rule 90 (variable)


State 6

   51 expressions: . expression
   52            | . expressions COMMA expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   76     | LEFT_CURLY_BRACE . expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   77     | LEFT_CURLY_BRACE . RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    LEFT_CURLY_BRACE   shift, and go to state 6
    RIGHT_CURLY_BRACE  shift, and go to state 44
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    STRING_LITERAL     shift, and go to state 12
    INT_LITERAL        shift, and go to state 13
    FLOAT_LITERAL      shift, and go to state 14

    expressions      go to state 45
    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 46
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 7

   53 if_start: IF .

    $default  reduce using rule 53 (if_start)


State 8

   54 else_start: ELSE .

    $default  reduce using rule 54 (else_start)


State 9

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   55          | FOR . expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 47
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 10

   46 global_start: GLOBAL .

    $default  reduce using rule 46 (global_start)


State 11

    9 import: IMPORT . STRING_LITERAL EOL

    STRING_LITERAL  shift, and go to state 48


State 12

   82 monomial: STRING_LITERAL .

    $default  reduce using rule 82 (monomial)


State 13

   84 monomial: INT_LITERAL .

    $default  reduce using rule 84 (monomial)


State 14

   83 monomial: FLOAT_LITERAL .

    $default  reduce using rule 83 (monomial)


State 15

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 49


State 16

    1 program: block .

    $default  reduce using rule 1 (program)


State 17

    2 block: lines .  ["end of file", RETURN, RIGHT_PARENTHESIS]
    4 lines: lines . line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    $default  reduce using rule 2 (block)

    line                    go to state 50
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 18

    3 lines: line .

    $default  reduce using rule 3 (lines)


State 19

    8 line: import .

    $default  reduce using rule 8 (line)


State 20

    5 line: line_content . EOL
    6     | line_content . "end of file"

    "end of file"  shift, and go to state 51
    EOL            shift, and go to state 52


State 21

    7 line: definition .

    $default  reduce using rule 7 (line)


State 22

   11 definition: function_definition .

    $default  reduce using rule 11 (definition)


State 23

   16 function_definition: function_start . arguments EOL block return_value EOL
   17                    | function_start . arguments EOL return_value EOL
   41 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   42          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 53

    arguments  go to state 54


State 24

   12 definition: class_definition .

    $default  reduce using rule 12 (definition)


State 25

   19 class_definition: class_start . arguments EOL members_definition methods
   20                 | class_start . arguments EOL members_definition
   21                 | class_start . arguments EOL methods
   41 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   42          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 53

    arguments  go to state 55


State 26

   13 definition: c_type_definition .

    $default  reduce using rule 13 (definition)


State 27

   23 c_type_definition: c_type_start . EOL C_members_definition

    EOL  shift, and go to state 56


State 28

   14 definition: globals_definition .

    $default  reduce using rule 14 (definition)


State 29

   45 globals_definition: global_start . EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    EOL  shift, and go to state 57


State 30

   15 definition: c_function_declaration .

    $default  reduce using rule 15 (definition)


State 31

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   56           | if_start . expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 58
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 32

   57 expression: else_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 59


State 33

   58 expression: for_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 60


State 34

   10 line_content: expression .  ["end of file", EOL]
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 10 (line_content)


State 35

   74 expression: list .

    $default  reduce using rule 74 (expression)


State 36

   75 expression: access .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   80 assign_variable: access . EQUAL expression
   88 call: access . LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | access . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    EQUAL             shift, and go to state 75
    LEFT_PARENTHESIS  shift, and go to state 76

    $default  reduce using rule 75 (expression)


State 37

   59 expression: assign_variable .

    $default  reduce using rule 59 (expression)


State 38

   73 expression: monomial .

    $default  reduce using rule 73 (expression)


State 39

   81 monomial: call .

    $default  reduce using rule 81 (monomial)


State 40

   85 monomial: variable .

    $default  reduce using rule 85 (monomial)


State 41

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL . C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION EOL . C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_ARGUMENT  shift, and go to state 77


State 42

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   79                | IDENTIFIER EQUAL . expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 78
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 43

   51 expressions: . expression
   52            | . expressions COMMA expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   86     | IDENTIFIER LEFT_PARENTHESIS . expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   87     | IDENTIFIER LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 79
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    STRING_LITERAL     shift, and go to state 12
    INT_LITERAL        shift, and go to state 13
    FLOAT_LITERAL      shift, and go to state 14

    expressions      go to state 80
    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 46
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 44

   77 list: LEFT_CURLY_BRACE RIGHT_CURLY_BRACE .

    $default  reduce using rule 77 (list)


State 45

   52 expressions: expressions . COMMA expression
   76 list: LEFT_CURLY_BRACE expressions . RIGHT_CURLY_BRACE

    COMMA              shift, and go to state 81
    RIGHT_CURLY_BRACE  shift, and go to state 82


State 46

   51 expressions: expression .  [COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE]
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 51 (expressions)


State 47

   55 for_start: FOR expression . COMMA expression COMMA expression
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74
    COMMA           shift, and go to state 83


State 48

    9 import: IMPORT STRING_LITERAL . EOL

    EOL  shift, and go to state 84


State 49

    0 $accept: program "end of file" .

    $default  accept


State 50

    4 lines: lines line .

    $default  reduce using rule 4 (lines)


State 51

    6 line: line_content "end of file" .

    $default  reduce using rule 6 (line)


State 52

    5 line: line_content EOL .

    $default  reduce using rule 5 (line)


State 53

   41 arguments: LEFT_PARENTHESIS . definition_arguments RIGHT_PARENTHESIS
   42          | LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   43 definition_arguments: . IDENTIFIER
   44                     | . definition_arguments COMMA IDENTIFIER

    IDENTIFIER         shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 86

    definition_arguments  go to state 87


State 54

   16 function_definition: function_start arguments . EOL block return_value EOL
   17                    | function_start arguments . EOL return_value EOL

    EOL  shift, and go to state 88


State 55

   19 class_definition: class_start arguments . EOL members_definition methods
   20                 | class_start arguments . EOL members_definition
   21                 | class_start arguments . EOL methods

    EOL  shift, and go to state 89


State 56

   23 c_type_definition: c_type_start EOL . C_members_definition
   32 C_members_definition: . MEMBER_IDENTIFIER EQUAL C_type_identifier EOL
   33                     | . C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

    MEMBER_IDENTIFIER  shift, and go to state 90

    C_members_definition  go to state 91


State 57

   45 globals_definition: global_start EOL . LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    LEFT_PARENTHESIS  shift, and go to state 92


State 58

   56 expression: if_start expression . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74
    EOL             shift, and go to state 93


State 59

   57 expression: else_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 94


State 60

   58 expression: for_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 95


State 61

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   60           | expression ARROW . expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 96
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 62

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   65           | expression OP_AND . expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 97
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 63

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   66           | expression OP_OR . expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 98
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 64

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   72           | expression OP_EQUAL . expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 99
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 65

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   71           | expression OP_NOT_EQUAL . expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 100
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 66

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   67           | expression OP_MORE_EQUAL . expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 101
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 67

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   68           | expression OP_LESS_EQUAL . expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 102
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 68

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   69           | expression OP_MORE . expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 103
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 69

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   70           | expression OP_LESS . expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 104
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 70

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   61           | expression PLUS . expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 105
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 71

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   62           | expression MINUS . expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 106
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 72

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   63           | expression ASTERISK . expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 107
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 73

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   64           | expression SLASH . expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 108
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 74

   78 access: expression DOT_IDENTIFIER .

    $default  reduce using rule 78 (access)


State 75

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   80                | access EQUAL . expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 109
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 76

   51 expressions: . expression
   52            | . expressions COMMA expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   88     | access LEFT_PARENTHESIS . expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   89     | access LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 110
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    STRING_LITERAL     shift, and go to state 12
    INT_LITERAL        shift, and go to state 13
    FLOAT_LITERAL      shift, and go to state 14

    expressions      go to state 111
    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 46
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 77

   34 C_type_identifier: . IDENTIFIER
   35                  | . C_type_identifier IDENTIFIER
   36 C_arguments: . C_type_identifier
   37            | . C_arguments COMMA C_type_identifier
   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT . C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT . EOL C_FUNCTION_RETURN C_returns EOL

    IDENTIFIER  shift, and go to state 112
    EOL         shift, and go to state 113

    C_type_identifier  go to state 114
    C_arguments        go to state 115


State 78

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER
   79 assign_variable: IDENTIFIER EQUAL expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 79 (assign_variable)

    Conflict between rule 79 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 79 and token OP_AND resolved as shift (EQUAL < OP_AND).
    Conflict between rule 79 and token OP_OR resolved as shift (EQUAL < OP_OR).
    Conflict between rule 79 and token OP_EQUAL resolved as shift (EQUAL < OP_EQUAL).
    Conflict between rule 79 and token OP_NOT_EQUAL resolved as shift (EQUAL < OP_NOT_EQUAL).
    Conflict between rule 79 and token OP_MORE_EQUAL resolved as shift (EQUAL < OP_MORE_EQUAL).
    Conflict between rule 79 and token OP_LESS_EQUAL resolved as shift (EQUAL < OP_LESS_EQUAL).
    Conflict between rule 79 and token OP_MORE resolved as shift (EQUAL < OP_MORE).
    Conflict between rule 79 and token OP_LESS resolved as shift (EQUAL < OP_LESS).
    Conflict between rule 79 and token PLUS resolved as shift (EQUAL < PLUS).
    Conflict between rule 79 and token MINUS resolved as shift (EQUAL < MINUS).
    Conflict between rule 79 and token ASTERISK resolved as shift (EQUAL < ASTERISK).
    Conflict between rule 79 and token SLASH resolved as shift (EQUAL < SLASH).
    Conflict between rule 79 and token DOT_IDENTIFIER resolved as shift (EQUAL < DOT_IDENTIFIER).


State 79

   87 call: IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 87 (call)


State 80

   52 expressions: expressions . COMMA expression
   86 call: IDENTIFIER LEFT_PARENTHESIS expressions . RIGHT_PARENTHESIS

    COMMA              shift, and go to state 81
    RIGHT_PARENTHESIS  shift, and go to state 116


State 81

   52 expressions: expressions COMMA . expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 117
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 82

   76 list: LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE .

    $default  reduce using rule 76 (list)


State 83

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   55          | FOR expression COMMA . expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 118
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 84

    9 import: IMPORT STRING_LITERAL EOL .

    $default  reduce using rule 9 (import)


State 85

   43 definition_arguments: IDENTIFIER .

    $default  reduce using rule 43 (definition_arguments)


State 86

   42 arguments: LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 42 (arguments)


State 87

   41 arguments: LEFT_PARENTHESIS definition_arguments . RIGHT_PARENTHESIS
   44 definition_arguments: definition_arguments . COMMA IDENTIFIER

    COMMA              shift, and go to state 119
    RIGHT_PARENTHESIS  shift, and go to state 120


State 88

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   16                    | function_start arguments EOL . block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   17                    | function_start arguments EOL . return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   39 return_value: . RETURN expression
   40             | . RETURN
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    RETURN                  shift, and go to state 121
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    block                   go to state 122
    lines                   go to state 17
    line                    go to state 18
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    return_value            go to state 123
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 89

   19 class_definition: class_start arguments EOL . members_definition methods
   20                 | class_start arguments EOL . members_definition
   21                 | class_start arguments EOL . methods
   25 methods: . method_definition EOL
   26        | . methods method_definition EOL
   27 method_start: . METHOD_DEFINITION
   28 method_definition: . method_start arguments EOL block return_value
   29                  | . method_start arguments EOL return_value
   30 members_definition: . MEMBER_IDENTIFIER EQUAL expression EOL
   31                   | . members_definition MEMBER_IDENTIFIER EQUAL expression EOL

    METHOD_DEFINITION  shift, and go to state 124
    MEMBER_IDENTIFIER  shift, and go to state 125

    methods             go to state 126
    method_start        go to state 127
    method_definition   go to state 128
    members_definition  go to state 129


State 90

   32 C_members_definition: MEMBER_IDENTIFIER . EQUAL C_type_identifier EOL

    EQUAL  shift, and go to state 130


State 91

   23 c_type_definition: c_type_start EOL C_members_definition .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   33 C_members_definition: C_members_definition . MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

    MEMBER_IDENTIFIER  shift, and go to state 131

    $default  reduce using rule 23 (c_type_definition)


State 92

   45 globals_definition: global_start EOL LEFT_PARENTHESIS . EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    EOL  shift, and go to state 132


State 93

   56 expression: if_start expression EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 133


State 94

   57 expression: else_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 134


State 95

   58 expression: for_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 135


State 96

   60 expression: expression . ARROW expression
   60           | expression ARROW expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 60 (expression)

    Conflict between rule 60 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 60 and token OP_AND resolved as shift (ARROW < OP_AND).
    Conflict between rule 60 and token OP_OR resolved as shift (ARROW < OP_OR).
    Conflict between rule 60 and token OP_EQUAL resolved as shift (ARROW < OP_EQUAL).
    Conflict between rule 60 and token OP_NOT_EQUAL resolved as shift (ARROW < OP_NOT_EQUAL).
    Conflict between rule 60 and token OP_MORE_EQUAL resolved as shift (ARROW < OP_MORE_EQUAL).
    Conflict between rule 60 and token OP_LESS_EQUAL resolved as shift (ARROW < OP_LESS_EQUAL).
    Conflict between rule 60 and token OP_MORE resolved as shift (ARROW < OP_MORE).
    Conflict between rule 60 and token OP_LESS resolved as shift (ARROW < OP_LESS).
    Conflict between rule 60 and token PLUS resolved as shift (ARROW < PLUS).
    Conflict between rule 60 and token MINUS resolved as shift (ARROW < MINUS).
    Conflict between rule 60 and token ASTERISK resolved as shift (ARROW < ASTERISK).
    Conflict between rule 60 and token SLASH resolved as shift (ARROW < SLASH).
    Conflict between rule 60 and token DOT_IDENTIFIER resolved as shift (ARROW < DOT_IDENTIFIER).


State 97

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   65           | expression OP_AND expression .  ["end of file", ARROW, OP_AND, OP_OR, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token ARROW resolved as reduce (ARROW < OP_AND).
    Conflict between rule 65 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 65 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 65 and token OP_EQUAL resolved as shift (OP_AND < OP_EQUAL).
    Conflict between rule 65 and token OP_NOT_EQUAL resolved as shift (OP_AND < OP_NOT_EQUAL).
    Conflict between rule 65 and token OP_MORE_EQUAL resolved as shift (OP_AND < OP_MORE_EQUAL).
    Conflict between rule 65 and token OP_LESS_EQUAL resolved as shift (OP_AND < OP_LESS_EQUAL).
    Conflict between rule 65 and token OP_MORE resolved as shift (OP_AND < OP_MORE).
    Conflict between rule 65 and token OP_LESS resolved as shift (OP_AND < OP_LESS).
    Conflict between rule 65 and token PLUS resolved as shift (OP_AND < PLUS).
    Conflict between rule 65 and token MINUS resolved as shift (OP_AND < MINUS).
    Conflict between rule 65 and token ASTERISK resolved as shift (OP_AND < ASTERISK).
    Conflict between rule 65 and token SLASH resolved as shift (OP_AND < SLASH).
    Conflict between rule 65 and token DOT_IDENTIFIER resolved as shift (OP_AND < DOT_IDENTIFIER).


State 98

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   66           | expression OP_OR expression .  ["end of file", ARROW, OP_AND, OP_OR, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token ARROW resolved as reduce (ARROW < OP_OR).
    Conflict between rule 66 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 66 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 66 and token OP_EQUAL resolved as shift (OP_OR < OP_EQUAL).
    Conflict between rule 66 and token OP_NOT_EQUAL resolved as shift (OP_OR < OP_NOT_EQUAL).
    Conflict between rule 66 and token OP_MORE_EQUAL resolved as shift (OP_OR < OP_MORE_EQUAL).
    Conflict between rule 66 and token OP_LESS_EQUAL resolved as shift (OP_OR < OP_LESS_EQUAL).
    Conflict between rule 66 and token OP_MORE resolved as shift (OP_OR < OP_MORE).
    Conflict between rule 66 and token OP_LESS resolved as shift (OP_OR < OP_LESS).
    Conflict between rule 66 and token PLUS resolved as shift (OP_OR < PLUS).
    Conflict between rule 66 and token MINUS resolved as shift (OP_OR < MINUS).
    Conflict between rule 66 and token ASTERISK resolved as shift (OP_OR < ASTERISK).
    Conflict between rule 66 and token SLASH resolved as shift (OP_OR < SLASH).
    Conflict between rule 66 and token DOT_IDENTIFIER resolved as shift (OP_OR < DOT_IDENTIFIER).


State 99

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   72           | expression OP_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   78 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token ARROW resolved as reduce (ARROW < OP_EQUAL).
    Conflict between rule 72 and token OP_AND resolved as reduce (OP_AND < OP_EQUAL).
    Conflict between rule 72 and token OP_OR resolved as reduce (OP_OR < OP_EQUAL).
    Conflict between rule 72 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 72 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 72 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 72 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 72 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 72 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 72 and token PLUS resolved as shift (OP_EQUAL < PLUS).
    Conflict between rule 72 and token MINUS resolved as shift (OP_EQUAL < MINUS).
    Conflict between rule 72 and token ASTERISK resolved as shift (OP_EQUAL < ASTERISK).
    Conflict between rule 72 and token SLASH resolved as shift (OP_EQUAL < SLASH).
    Conflict between rule 72 and token DOT_IDENTIFIER resolved as shift (OP_EQUAL < DOT_IDENTIFIER).


State 100

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   71           | expression OP_NOT_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token ARROW resolved as reduce (ARROW < OP_NOT_EQUAL).
    Conflict between rule 71 and token OP_AND resolved as reduce (OP_AND < OP_NOT_EQUAL).
    Conflict between rule 71 and token OP_OR resolved as reduce (OP_OR < OP_NOT_EQUAL).
    Conflict between rule 71 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 71 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 71 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 71 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 71 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 71 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 71 and token PLUS resolved as shift (OP_NOT_EQUAL < PLUS).
    Conflict between rule 71 and token MINUS resolved as shift (OP_NOT_EQUAL < MINUS).
    Conflict between rule 71 and token ASTERISK resolved as shift (OP_NOT_EQUAL < ASTERISK).
    Conflict between rule 71 and token SLASH resolved as shift (OP_NOT_EQUAL < SLASH).
    Conflict between rule 71 and token DOT_IDENTIFIER resolved as shift (OP_NOT_EQUAL < DOT_IDENTIFIER).


State 101

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   67           | expression OP_MORE_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token ARROW resolved as reduce (ARROW < OP_MORE_EQUAL).
    Conflict between rule 67 and token OP_AND resolved as reduce (OP_AND < OP_MORE_EQUAL).
    Conflict between rule 67 and token OP_OR resolved as reduce (OP_OR < OP_MORE_EQUAL).
    Conflict between rule 67 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 67 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 67 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 67 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 67 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 67 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 67 and token PLUS resolved as shift (OP_MORE_EQUAL < PLUS).
    Conflict between rule 67 and token MINUS resolved as shift (OP_MORE_EQUAL < MINUS).
    Conflict between rule 67 and token ASTERISK resolved as shift (OP_MORE_EQUAL < ASTERISK).
    Conflict between rule 67 and token SLASH resolved as shift (OP_MORE_EQUAL < SLASH).
    Conflict between rule 67 and token DOT_IDENTIFIER resolved as shift (OP_MORE_EQUAL < DOT_IDENTIFIER).


State 102

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   68           | expression OP_LESS_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token ARROW resolved as reduce (ARROW < OP_LESS_EQUAL).
    Conflict between rule 68 and token OP_AND resolved as reduce (OP_AND < OP_LESS_EQUAL).
    Conflict between rule 68 and token OP_OR resolved as reduce (OP_OR < OP_LESS_EQUAL).
    Conflict between rule 68 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 68 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 68 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 68 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 68 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 68 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 68 and token PLUS resolved as shift (OP_LESS_EQUAL < PLUS).
    Conflict between rule 68 and token MINUS resolved as shift (OP_LESS_EQUAL < MINUS).
    Conflict between rule 68 and token ASTERISK resolved as shift (OP_LESS_EQUAL < ASTERISK).
    Conflict between rule 68 and token SLASH resolved as shift (OP_LESS_EQUAL < SLASH).
    Conflict between rule 68 and token DOT_IDENTIFIER resolved as shift (OP_LESS_EQUAL < DOT_IDENTIFIER).


State 103

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   69           | expression OP_MORE expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token ARROW resolved as reduce (ARROW < OP_MORE).
    Conflict between rule 69 and token OP_AND resolved as reduce (OP_AND < OP_MORE).
    Conflict between rule 69 and token OP_OR resolved as reduce (OP_OR < OP_MORE).
    Conflict between rule 69 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 69 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 69 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 69 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 69 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 69 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 69 and token PLUS resolved as shift (OP_MORE < PLUS).
    Conflict between rule 69 and token MINUS resolved as shift (OP_MORE < MINUS).
    Conflict between rule 69 and token ASTERISK resolved as shift (OP_MORE < ASTERISK).
    Conflict between rule 69 and token SLASH resolved as shift (OP_MORE < SLASH).
    Conflict between rule 69 and token DOT_IDENTIFIER resolved as shift (OP_MORE < DOT_IDENTIFIER).


State 104

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   70           | expression OP_LESS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token ARROW resolved as reduce (ARROW < OP_LESS).
    Conflict between rule 70 and token OP_AND resolved as reduce (OP_AND < OP_LESS).
    Conflict between rule 70 and token OP_OR resolved as reduce (OP_OR < OP_LESS).
    Conflict between rule 70 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 70 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 70 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 70 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 70 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 70 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 70 and token PLUS resolved as shift (OP_LESS < PLUS).
    Conflict between rule 70 and token MINUS resolved as shift (OP_LESS < MINUS).
    Conflict between rule 70 and token ASTERISK resolved as shift (OP_LESS < ASTERISK).
    Conflict between rule 70 and token SLASH resolved as shift (OP_LESS < SLASH).
    Conflict between rule 70 and token DOT_IDENTIFIER resolved as shift (OP_LESS < DOT_IDENTIFIER).


State 105

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   61           | expression PLUS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 61 (expression)

    Conflict between rule 61 and token ARROW resolved as reduce (ARROW < PLUS).
    Conflict between rule 61 and token OP_AND resolved as reduce (OP_AND < PLUS).
    Conflict between rule 61 and token OP_OR resolved as reduce (OP_OR < PLUS).
    Conflict between rule 61 and token OP_EQUAL resolved as reduce (OP_EQUAL < PLUS).
    Conflict between rule 61 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < PLUS).
    Conflict between rule 61 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < PLUS).
    Conflict between rule 61 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < PLUS).
    Conflict between rule 61 and token OP_MORE resolved as reduce (OP_MORE < PLUS).
    Conflict between rule 61 and token OP_LESS resolved as reduce (OP_LESS < PLUS).
    Conflict between rule 61 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 61 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 61 and token ASTERISK resolved as shift (PLUS < ASTERISK).
    Conflict between rule 61 and token SLASH resolved as shift (PLUS < SLASH).
    Conflict between rule 61 and token DOT_IDENTIFIER resolved as shift (PLUS < DOT_IDENTIFIER).


State 106

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   62           | expression MINUS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token ARROW resolved as reduce (ARROW < MINUS).
    Conflict between rule 62 and token OP_AND resolved as reduce (OP_AND < MINUS).
    Conflict between rule 62 and token OP_OR resolved as reduce (OP_OR < MINUS).
    Conflict between rule 62 and token OP_EQUAL resolved as reduce (OP_EQUAL < MINUS).
    Conflict between rule 62 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < MINUS).
    Conflict between rule 62 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < MINUS).
    Conflict between rule 62 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < MINUS).
    Conflict between rule 62 and token OP_MORE resolved as reduce (OP_MORE < MINUS).
    Conflict between rule 62 and token OP_LESS resolved as reduce (OP_LESS < MINUS).
    Conflict between rule 62 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 62 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 62 and token ASTERISK resolved as shift (MINUS < ASTERISK).
    Conflict between rule 62 and token SLASH resolved as shift (MINUS < SLASH).
    Conflict between rule 62 and token DOT_IDENTIFIER resolved as shift (MINUS < DOT_IDENTIFIER).


State 107

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   63           | expression ASTERISK expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token ARROW resolved as reduce (ARROW < ASTERISK).
    Conflict between rule 63 and token OP_AND resolved as reduce (OP_AND < ASTERISK).
    Conflict between rule 63 and token OP_OR resolved as reduce (OP_OR < ASTERISK).
    Conflict between rule 63 and token OP_EQUAL resolved as reduce (OP_EQUAL < ASTERISK).
    Conflict between rule 63 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < ASTERISK).
    Conflict between rule 63 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < ASTERISK).
    Conflict between rule 63 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < ASTERISK).
    Conflict between rule 63 and token OP_MORE resolved as reduce (OP_MORE < ASTERISK).
    Conflict between rule 63 and token OP_LESS resolved as reduce (OP_LESS < ASTERISK).
    Conflict between rule 63 and token PLUS resolved as reduce (PLUS < ASTERISK).
    Conflict between rule 63 and token MINUS resolved as reduce (MINUS < ASTERISK).
    Conflict between rule 63 and token ASTERISK resolved as reduce (%left ASTERISK).
    Conflict between rule 63 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 63 and token DOT_IDENTIFIER resolved as shift (ASTERISK < DOT_IDENTIFIER).


State 108

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   64           | expression SLASH expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token ARROW resolved as reduce (ARROW < SLASH).
    Conflict between rule 64 and token OP_AND resolved as reduce (OP_AND < SLASH).
    Conflict between rule 64 and token OP_OR resolved as reduce (OP_OR < SLASH).
    Conflict between rule 64 and token OP_EQUAL resolved as reduce (OP_EQUAL < SLASH).
    Conflict between rule 64 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < SLASH).
    Conflict between rule 64 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < SLASH).
    Conflict between rule 64 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < SLASH).
    Conflict between rule 64 and token OP_MORE resolved as reduce (OP_MORE < SLASH).
    Conflict between rule 64 and token OP_LESS resolved as reduce (OP_LESS < SLASH).
    Conflict between rule 64 and token PLUS resolved as reduce (PLUS < SLASH).
    Conflict between rule 64 and token MINUS resolved as reduce (MINUS < SLASH).
    Conflict between rule 64 and token ASTERISK resolved as reduce (%left ASTERISK).
    Conflict between rule 64 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 64 and token DOT_IDENTIFIER resolved as shift (SLASH < DOT_IDENTIFIER).


State 109

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER
   80 assign_variable: access EQUAL expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 80 (assign_variable)

    Conflict between rule 80 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 80 and token OP_AND resolved as shift (EQUAL < OP_AND).
    Conflict between rule 80 and token OP_OR resolved as shift (EQUAL < OP_OR).
    Conflict between rule 80 and token OP_EQUAL resolved as shift (EQUAL < OP_EQUAL).
    Conflict between rule 80 and token OP_NOT_EQUAL resolved as shift (EQUAL < OP_NOT_EQUAL).
    Conflict between rule 80 and token OP_MORE_EQUAL resolved as shift (EQUAL < OP_MORE_EQUAL).
    Conflict between rule 80 and token OP_LESS_EQUAL resolved as shift (EQUAL < OP_LESS_EQUAL).
    Conflict between rule 80 and token OP_MORE resolved as shift (EQUAL < OP_MORE).
    Conflict between rule 80 and token OP_LESS resolved as shift (EQUAL < OP_LESS).
    Conflict between rule 80 and token PLUS resolved as shift (EQUAL < PLUS).
    Conflict between rule 80 and token MINUS resolved as shift (EQUAL < MINUS).
    Conflict between rule 80 and token ASTERISK resolved as shift (EQUAL < ASTERISK).
    Conflict between rule 80 and token SLASH resolved as shift (EQUAL < SLASH).
    Conflict between rule 80 and token DOT_IDENTIFIER resolved as shift (EQUAL < DOT_IDENTIFIER).


State 110

   89 call: access LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 89 (call)


State 111

   52 expressions: expressions . COMMA expression
   88 call: access LEFT_PARENTHESIS expressions . RIGHT_PARENTHESIS

    COMMA              shift, and go to state 81
    RIGHT_PARENTHESIS  shift, and go to state 136


State 112

   34 C_type_identifier: IDENTIFIER .

    $default  reduce using rule 34 (C_type_identifier)


State 113

   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL . C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_RETURN  shift, and go to state 137


State 114

   35 C_type_identifier: C_type_identifier . IDENTIFIER
   36 C_arguments: C_type_identifier .  [COMMA, EOL]

    IDENTIFIER  shift, and go to state 138

    $default  reduce using rule 36 (C_arguments)


State 115

   37 C_arguments: C_arguments . COMMA C_type_identifier
   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments . EOL C_FUNCTION_RETURN C_returns EOL

    COMMA  shift, and go to state 139
    EOL    shift, and go to state 140


State 116

   86 call: IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS .

    $default  reduce using rule 86 (call)


State 117

   52 expressions: expressions COMMA expression .  [COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE]
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 52 (expressions)


State 118

   55 for_start: FOR expression COMMA expression . COMMA expression
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74
    COMMA           shift, and go to state 141


State 119

   44 definition_arguments: definition_arguments COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 142


State 120

   41 arguments: LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS .

    $default  reduce using rule 41 (arguments)


State 121

   39 return_value: RETURN . expression
   40             | RETURN .  [EOL]
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    $default  reduce using rule 40 (return_value)

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 143
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 122

   16 function_definition: function_start arguments EOL block . return_value EOL
   39 return_value: . RETURN expression
   40             | . RETURN

    RETURN  shift, and go to state 121

    return_value  go to state 144


State 123

   17 function_definition: function_start arguments EOL return_value . EOL

    EOL  shift, and go to state 145


State 124

   27 method_start: METHOD_DEFINITION .

    $default  reduce using rule 27 (method_start)


State 125

   30 members_definition: MEMBER_IDENTIFIER . EQUAL expression EOL

    EQUAL  shift, and go to state 146


State 126

   21 class_definition: class_start arguments EOL methods .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   26 methods: methods . method_definition EOL
   27 method_start: . METHOD_DEFINITION
   28 method_definition: . method_start arguments EOL block return_value
   29                  | . method_start arguments EOL return_value

    METHOD_DEFINITION  shift, and go to state 124

    $default  reduce using rule 21 (class_definition)

    method_start       go to state 127
    method_definition  go to state 147


State 127

   28 method_definition: method_start . arguments EOL block return_value
   29                  | method_start . arguments EOL return_value
   41 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   42          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 53

    arguments  go to state 148


State 128

   25 methods: method_definition . EOL

    EOL  shift, and go to state 149


State 129

   19 class_definition: class_start arguments EOL members_definition . methods
   20                 | class_start arguments EOL members_definition .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   25 methods: . method_definition EOL
   26        | . methods method_definition EOL
   27 method_start: . METHOD_DEFINITION
   28 method_definition: . method_start arguments EOL block return_value
   29                  | . method_start arguments EOL return_value
   31 members_definition: members_definition . MEMBER_IDENTIFIER EQUAL expression EOL

    METHOD_DEFINITION  shift, and go to state 124
    MEMBER_IDENTIFIER  shift, and go to state 150

    $default  reduce using rule 20 (class_definition)

    methods            go to state 151
    method_start       go to state 127
    method_definition  go to state 128


State 130

   32 C_members_definition: MEMBER_IDENTIFIER EQUAL . C_type_identifier EOL
   34 C_type_identifier: . IDENTIFIER
   35                  | . C_type_identifier IDENTIFIER

    IDENTIFIER  shift, and go to state 112

    C_type_identifier  go to state 152


State 131

   33 C_members_definition: C_members_definition MEMBER_IDENTIFIER . EQUAL C_type_identifier EOL

    EQUAL  shift, and go to state 153


State 132

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL . globals_variables EOL RIGHT_PARENTHESIS EOL
   47 globals_variables: . assign_variable
   48                  | . globals_variables EOL assign_variable
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    globals_variables  go to state 154
    if_start           go to state 31
    else_start         go to state 32
    for_start          go to state 33
    expression         go to state 155
    list               go to state 35
    access             go to state 36
    assign_variable    go to state 156
    monomial           go to state 38
    call               go to state 39
    variable           go to state 40


State 133

   56 expression: if_start expression EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 157


State 134

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | else_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    block                   go to state 158
    lines                   go to state 17
    line                    go to state 18
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 135

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | for_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    block                   go to state 159
    lines                   go to state 17
    line                    go to state 18
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 136

   88 call: access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS .

    $default  reduce using rule 88 (call)


State 137

   34 C_type_identifier: . IDENTIFIER
   35                  | . C_type_identifier IDENTIFIER
   38 C_returns: . C_type_identifier
   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN . C_returns EOL

    IDENTIFIER  shift, and go to state 112

    C_type_identifier  go to state 160
    C_returns          go to state 161


State 138

   35 C_type_identifier: C_type_identifier IDENTIFIER .

    $default  reduce using rule 35 (C_type_identifier)


State 139

   34 C_type_identifier: . IDENTIFIER
   35                  | . C_type_identifier IDENTIFIER
   37 C_arguments: C_arguments COMMA . C_type_identifier

    IDENTIFIER  shift, and go to state 112

    C_type_identifier  go to state 162


State 140

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL . C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_RETURN  shift, and go to state 163


State 141

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   55          | FOR expression COMMA expression COMMA . expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 164
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 142

   44 definition_arguments: definition_arguments COMMA IDENTIFIER .

    $default  reduce using rule 44 (definition_arguments)


State 143

   39 return_value: RETURN expression .  [EOL]
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 39 (return_value)


State 144

   16 function_definition: function_start arguments EOL block return_value . EOL

    EOL  shift, and go to state 165


State 145

   17 function_definition: function_start arguments EOL return_value EOL .

    $default  reduce using rule 17 (function_definition)


State 146

   30 members_definition: MEMBER_IDENTIFIER EQUAL . expression EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 166
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 147

   26 methods: methods method_definition . EOL

    EOL  shift, and go to state 167


State 148

   28 method_definition: method_start arguments . EOL block return_value
   29                  | method_start arguments . EOL return_value

    EOL  shift, and go to state 168


State 149

   25 methods: method_definition EOL .

    $default  reduce using rule 25 (methods)


State 150

   31 members_definition: members_definition MEMBER_IDENTIFIER . EQUAL expression EOL

    EQUAL  shift, and go to state 169


State 151

   19 class_definition: class_start arguments EOL members_definition methods .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   26 methods: methods . method_definition EOL
   27 method_start: . METHOD_DEFINITION
   28 method_definition: . method_start arguments EOL block return_value
   29                  | . method_start arguments EOL return_value

    METHOD_DEFINITION  shift, and go to state 124

    $default  reduce using rule 19 (class_definition)

    method_start       go to state 127
    method_definition  go to state 147


State 152

   32 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier . EOL
   35 C_type_identifier: C_type_identifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 138
    EOL         shift, and go to state 170


State 153

   33 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL . C_type_identifier EOL
   34 C_type_identifier: . IDENTIFIER
   35                  | . C_type_identifier IDENTIFIER

    IDENTIFIER  shift, and go to state 112

    C_type_identifier  go to state 171


State 154

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables . EOL RIGHT_PARENTHESIS EOL
   48 globals_variables: globals_variables . EOL assign_variable

    EOL  shift, and go to state 172


State 155

   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74


State 156

   47 globals_variables: assign_variable .  [EOL]
   59 expression: assign_variable .  [ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER]

    EOL       reduce using rule 47 (globals_variables)
    $default  reduce using rule 59 (expression)


State 157

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   56           | if_start expression EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    block                   go to state 173
    lines                   go to state 17
    line                    go to state 18
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 158

   57 expression: else_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 174


State 159

   58 expression: for_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 175


State 160

   35 C_type_identifier: C_type_identifier . IDENTIFIER
   38 C_returns: C_type_identifier .  [EOL]

    IDENTIFIER  shift, and go to state 138

    $default  reduce using rule 38 (C_returns)


State 161

   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns . EOL

    EOL  shift, and go to state 176


State 162

   35 C_type_identifier: C_type_identifier . IDENTIFIER
   37 C_arguments: C_arguments COMMA C_type_identifier .  [COMMA, EOL]

    IDENTIFIER  shift, and go to state 138

    $default  reduce using rule 37 (C_arguments)


State 163

   34 C_type_identifier: . IDENTIFIER
   35                  | . C_type_identifier IDENTIFIER
   38 C_returns: . C_type_identifier
   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN . C_returns EOL

    IDENTIFIER  shift, and go to state 112

    C_type_identifier  go to state 160
    C_returns          go to state 177


State 164

   55 for_start: FOR expression COMMA expression COMMA expression .  [EOL]
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 55 (for_start)


State 165

   16 function_definition: function_start arguments EOL block return_value EOL .

    $default  reduce using rule 16 (function_definition)


State 166

   30 members_definition: MEMBER_IDENTIFIER EQUAL expression . EOL
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74
    EOL             shift, and go to state 178


State 167

   26 methods: methods method_definition EOL .

    $default  reduce using rule 26 (methods)


State 168

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   28 method_definition: method_start arguments EOL . block return_value
   29                  | method_start arguments EOL . return_value
   39 return_value: . RETURN expression
   40             | . RETURN
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    RETURN                  shift, and go to state 121
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    GLOBAL                  shift, and go to state 10
    IMPORT                  shift, and go to state 11
    STRING_LITERAL          shift, and go to state 12
    INT_LITERAL             shift, and go to state 13
    FLOAT_LITERAL           shift, and go to state 14

    block                   go to state 179
    lines                   go to state 17
    line                    go to state 18
    import                  go to state 19
    line_content            go to state 20
    definition              go to state 21
    function_definition     go to state 22
    function_start          go to state 23
    class_definition        go to state 24
    class_start             go to state 25
    c_type_definition       go to state 26
    c_type_start            go to state 27
    return_value            go to state 180
    globals_definition      go to state 28
    global_start            go to state 29
    c_function_declaration  go to state 30
    if_start                go to state 31
    else_start              go to state 32
    for_start               go to state 33
    expression              go to state 34
    list                    go to state 35
    access                  go to state 36
    assign_variable         go to state 37
    monomial                go to state 38
    call                    go to state 39
    variable                go to state 40


State 169

   31 members_definition: members_definition MEMBER_IDENTIFIER EQUAL . expression EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    STRING_LITERAL    shift, and go to state 12
    INT_LITERAL       shift, and go to state 13
    FLOAT_LITERAL     shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 181
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 37
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 170

   32 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier EOL .

    $default  reduce using rule 32 (C_members_definition)


State 171

   33 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier . EOL
   35 C_type_identifier: C_type_identifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 138
    EOL         shift, and go to state 182


State 172

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL . RIGHT_PARENTHESIS EOL
   48 globals_variables: globals_variables EOL . assign_variable
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . assign_variable
   60           | . expression ARROW expression
   61           | . expression PLUS expression
   62           | . expression MINUS expression
   63           | . expression ASTERISK expression
   64           | . expression SLASH expression
   65           | . expression OP_AND expression
   66           | . expression OP_OR expression
   67           | . expression OP_MORE_EQUAL expression
   68           | . expression OP_LESS_EQUAL expression
   69           | . expression OP_MORE expression
   70           | . expression OP_LESS expression
   71           | . expression OP_NOT_EQUAL expression
   72           | . expression OP_EQUAL expression
   73           | . monomial
   74           | . list
   75           | . access
   76 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   77     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   78 access: . expression DOT_IDENTIFIER
   79 assign_variable: . IDENTIFIER EQUAL expression
   80                | . access EQUAL expression
   81 monomial: . call
   82         | . STRING_LITERAL
   83         | . FLOAT_LITERAL
   84         | . INT_LITERAL
   85         | . variable
   86 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   87     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   88     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 183
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    STRING_LITERAL     shift, and go to state 12
    INT_LITERAL        shift, and go to state 13
    FLOAT_LITERAL      shift, and go to state 14

    if_start         go to state 31
    else_start       go to state 32
    for_start        go to state 33
    expression       go to state 155
    list             go to state 35
    access           go to state 36
    assign_variable  go to state 184
    monomial         go to state 38
    call             go to state 39
    variable         go to state 40


State 173

   56 expression: if_start expression EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 185


State 174

   57 expression: else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 57 (expression)


State 175

   58 expression: for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 58 (expression)


State 176

   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL .

    $default  reduce using rule 50 (c_function_declaration)


State 177

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns . EOL

    EOL  shift, and go to state 186


State 178

   30 members_definition: MEMBER_IDENTIFIER EQUAL expression EOL .

    $default  reduce using rule 30 (members_definition)


State 179

   28 method_definition: method_start arguments EOL block . return_value
   39 return_value: . RETURN expression
   40             | . RETURN

    RETURN  shift, and go to state 121

    return_value  go to state 187


State 180

   29 method_definition: method_start arguments EOL return_value .

    $default  reduce using rule 29 (method_definition)


State 181

   31 members_definition: members_definition MEMBER_IDENTIFIER EQUAL expression . EOL
   60 expression: expression . ARROW expression
   61           | expression . PLUS expression
   62           | expression . MINUS expression
   63           | expression . ASTERISK expression
   64           | expression . SLASH expression
   65           | expression . OP_AND expression
   66           | expression . OP_OR expression
   67           | expression . OP_MORE_EQUAL expression
   68           | expression . OP_LESS_EQUAL expression
   69           | expression . OP_MORE expression
   70           | expression . OP_LESS expression
   71           | expression . OP_NOT_EQUAL expression
   72           | expression . OP_EQUAL expression
   78 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 61
    OP_AND          shift, and go to state 62
    OP_OR           shift, and go to state 63
    OP_EQUAL        shift, and go to state 64
    OP_NOT_EQUAL    shift, and go to state 65
    OP_MORE_EQUAL   shift, and go to state 66
    OP_LESS_EQUAL   shift, and go to state 67
    OP_MORE         shift, and go to state 68
    OP_LESS         shift, and go to state 69
    PLUS            shift, and go to state 70
    MINUS           shift, and go to state 71
    ASTERISK        shift, and go to state 72
    SLASH           shift, and go to state 73
    DOT_IDENTIFIER  shift, and go to state 74
    EOL             shift, and go to state 188


State 182

   33 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL .

    $default  reduce using rule 33 (C_members_definition)


State 183

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS . EOL

    EOL  shift, and go to state 189


State 184

   48 globals_variables: globals_variables EOL assign_variable .  [EOL]
   59 expression: assign_variable .  [ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER]

    EOL       reduce using rule 48 (globals_variables)
    $default  reduce using rule 59 (expression)


State 185

   56 expression: if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 56 (expression)


State 186

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL .

    $default  reduce using rule 49 (c_function_declaration)


State 187

   28 method_definition: method_start arguments EOL block return_value .

    $default  reduce using rule 28 (method_definition)


State 188

   31 members_definition: members_definition MEMBER_IDENTIFIER EQUAL expression EOL .

    $default  reduce using rule 31 (members_definition)


State 189

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL .

    $default  reduce using rule 45 (globals_definition)
